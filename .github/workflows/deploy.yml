name: Live Test Environment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  setup:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ['development', 'staging', 'production']
    steps:
      - name: Setup Job
        run: echo "Setting up for ${{ matrix.environment }} environment"

  deploy:
    needs: setup-terraform-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./infrastructure
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: About to intialize Terraform with bucket
        run: echo '${{ needs.setup-terraform-backend.outputs.backend_bucket }}'
      
      - name: About to intialize Terraform with region
        run: echo '${{ vars.AWS_REGION }}'

      - name: Initialize Terraform for Main Infrastructure
        run: |
          terraform init \
            -backend-config="bucket=${{ needs.setup-terraform-backend.outputs.backend_bucket }}"
      - name: Terraform Apply
        run: terraform apply -auto-approve

  setup-terraform-backend:
    needs: setup
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      account_id: ${{ steps.get-account-id.outputs.account_id }}
      backend_bucket: ${{ steps.create-bucket.outputs.bucket_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Retrieve AWS Account ID
        id: get-account-id
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          echo "::set-output name=account_id::$ACCOUNT_ID"

      - name: Create S3 state bucket if it doesn't exist
        id: create-bucket
        run: |
          BUCKET_NAME="terraform-state-${{ matrix.environment }}-${{ vars.AWS_REGION }}-${{ steps.get-account-id.outputs.account_id }}"
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket $BUCKET_NAME already exists"
          else
            echo "Bucket $BUCKET_NAME does not exist, creating now..."
            if [ "${{ vars.AWS_REGION }}" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET_NAME"
            else
              aws s3api create-bucket --bucket "$BUCKET_NAME" --create-bucket-configuration LocationConstraint=${{ vars.AWS_REGION }}
            fi
            echo "Bucket $BUCKET_NAME created"
            echo "RESOURCE_CREATED=true" >> $GITHUB_ENV
          fi
          echo "::set-output name=bucket_name::$BUCKET_NAME"

      - name: Create State Lock DynamoDB table if it doesn't exist
        run: |
          TABLE_NAME="terraform-state-lock"
          if aws dynamodb describe-table --table-name "$TABLE_NAME" --output text; then
            echo "DynamoDB table $TABLE_NAME already exists."
          else
            echo "DynamoDB table $TABLE_NAME does not exist. Creating..."
            aws dynamodb create-table \
              --table-name "$TABLE_NAME" \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --billing-mode PAY_PER_REQUEST \
              --output text
            echo "DynamoDB table $TABLE_NAME created."
            echo "RESOURCE_CREATED=true" >> $GITHUB_ENV
          fi

      - name: Waiting for S3 bucket and DynamoDB table to be ready
        if: env.RESOURCE_CREATED == 'true'
        run: |
          echo "Waiting for resources to be fully consistent..."
          sleep 30 # Waits for 30 seconds
          
      - name: Enabling Point-In-Time Recovery...
        if: env.RESOURCE_CREATED == 'true'
        run: |
          TABLE_NAME="terraform-state-lock"
          aws dynamodb update-continuous-backups \
            --table-name "$TABLE_NAME" \
            --point-in-time-recovery-specification PointInTimeRecoveryEnabled=True
          echo "Point-In-Time Recovery enabled for $TABLE_NAME."
      
            